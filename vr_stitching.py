# -*- coding: utf-8 -*-
"""VR Stitching

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1jhfq9upez0X6r32kKXvgnUlUiZSDC6-q
"""

import cv2
import numpy as np
import matplotlib.pyplot as plt

images = [cv2.imread("Stitch2.jpg"), cv2.imread("Stitch1.jpg")]

gray_images = [cv2.cvtColor(img, cv2.COLOR_BGR2GRAY) for img in images]

sift = cv2.SIFT_create()

keypoints_descriptors = [sift.detectAndCompute(img, None) for img in gray_images]
keypoints, descriptors = zip(*keypoints_descriptors)

FLANN_INDEX_KDTREE = 1
index_params = dict(algorithm=FLANN_INDEX_KDTREE, trees=5)
search_params = dict(checks=50)

flann = cv2.FlannBasedMatcher(index_params, search_params)

matches = [flann.knnMatch(descriptors[i], descriptors[i+1], k=2) for i in range(len(images)-1)]

good_matches = []
for match in matches:
    good = [m for m, n in match if m.distance < 0.7 * n.distance]
    good_matches.append(good)

def get_homography(img1, img2, kp1, kp2, matches):
    src_pts = np.float32([kp1[m.queryIdx].pt for m in matches]).reshape(-1, 1, 2)
    dst_pts = np.float32([kp2[m.trainIdx].pt for m in matches]).reshape(-1, 1, 2)

    H, _ = cv2.findHomography(src_pts, dst_pts, cv2.RANSAC, 5.0)
    return H

result = images[0]

for i in range(len(images)-1):
    H = get_homography(images[i], images[i+1], keypoints[i], keypoints[i+1], good_matches[i])

    width = result.shape[1] + images[i+1].shape[1]
    height = result.shape[0]

    result = cv2.warpPerspective(result, H, (width, height))
    result[0:images[i+1].shape[0], 0:images[i+1].shape[1]] = images[i+1]

result_rgb = cv2.cvtColor(result, cv2.COLOR_BGR2RGB)

plt.figure(figsize=(15,5))
plt.imshow(result_rgb)
plt.axis('off')
plt.title("Stitched Panorama")
plt.show()